# This is a sample configuration file for the umapi connector type.
#
# umapi (user management api) is a network protocol served by Adobe that
# provides management of users in Adobe-hosted enterprise organizations.
#
# This sample file contains all of the settable options for this protocol.
# All of the settings here can be changed.  It is recommended
# that you make a copy of this file and edit that to match your configuration.
# While you are at it, you will likely want to remove a lot of this  commentary,
# in order to enhance the readability of your file.

# (optional) UMAPI server settings (defaults as shown)
# The host and endpoint settings specify the Adobe endpoints which
# host the UMAPI services and those which provide authorization.
# The timeout and retries settings control how much delay (in seconds)
# can be tolerated in server responses, and also how many times a request
# that fails due to server timeout or server throttling will be retried.
# You will *never* need to alter these settings unless you are provided
# alternate values by Adobe as part of a support engagement.  It is
# highly recommended that you leave these values commented out
# so that the default values are guaranteed to be used.

# (optional) ssl_verify
# Allows you to disable the SSL verification used by the requests module.  This can
# come in handy for troubleshooting or working around network / proxy related issues when
# the following error is encountered:

#  'UMAPI connection to org id failed: [SSL: CERTIFICATE_VERIFY_FAILED]'

# It is recommended to leave this set to default (True), since it leaves UST potentially
# vulnerable to middle man attacks and set to False only if absolutely needed.
server:
  #host: usermanagement.adobe.io
  #endpoint: /v2/usermanagement
  #ims_host: ims-na1.adobelogin.com
  #ims_endpoint_jwt: /ims/exchange/jwt
  #timeout: 120
  #retries: 3

# (required) enterprise organization settings
# You must specify all five of these settings.  Consult the
# Adobe UMAPI documentation and the Adobe I/O Console to determine
# the correct settings for your enterprise organization.
# [NOTE: the priv_key_path setting can be an absolute or relative pathname;
# if relative, it is interpreted relative to this configuration file.]
enterprise:
  org_id: "Org ID goes here"
  client_id: "Client ID goes here"
  client_secret: "Client secret goes here"
  tech_acct_id: "Tech account ID goes here"
  priv_key_path: "private.key"

  # (optional) As an alternative to priv_key_path, you can place the private key 
  # data directly in this file.  To do this, remove the priv_key_path entry above 
  # and uncomment the following entry.  Replace the sample data with the data 
  # from your private key file (which will be much longer).
  #priv_key_data: |
  #   -----BEGIN RSA PRIVATE KEY-----
  #   MIIf74jfd84oAgEA6brj4uZ2f1Nkf84j843jfjjJGHYJ8756GHHGGz7jLyZWSscH
  #   CoifurKJY763GHKL98mJGYxWSBvhlWskdjdatagoeshere986fKFUNGd74kdfuEH
  #   -----END RSA PRIVATE KEY-----

  # (optional) You can store credentials in the operating system credential store
  # (Windows Credential Manager, Mac Keychain, Linux Freedesktop Secret Service
  # or KWallet - these will be built into the Linux distribution).
  # To use this feature, uncomment the following entries and remove the
  # client_id, client_secret, and priv_key_data above.
  # The actual credential values are placed in the credential store with the
  # username as the org_id value, and the key name (perhaps called internet 
  # or network address) as one of the values below.
  #secure_client_id_key: umapi_client_id
  #secure_client_secret_key: umapi_client_secret
  #secure_priv_key_data_key: umapi_private_key_data
  # Note: the Windows credential store generally can't store data as large as a private
  # key, so the recommended path for securing your private key on windows is given next.

  # (optional): You can secure your private key data by encrypting it, as with
  #     openssl pkcs8 -in private.key -topk8 -v2 des3 -out private-encrypted.key
  # which prompts for a passphrase and creates a passphrase-encrypted file in PKCS#8 format.
  # Having done this, you can use the setting priv_key_pass to specify the passphrase needed
  # by User Sync to decrypt the private key file (or private key data), as in:
  #priv_key_pass: "my passphrase for my private key"
  # For better security, you should save your passphrase into the secure credential store
  # on your platform (username = your org ID, service/internet address = "umapi_private_key_passphrase")
  # and then uncomment this setting:
  #secure_priv_key_pass_key: umapi_private_key_passphrase
